cmake_minimum_required(VERSION 2.8)
PROJECT(scan-registration-app)
FIND_PACKAGE(Qt4 REQUIRED)
FIND_PACKAGE(VTK REQUIRED)

IF(VTK_FOUND AND QT_FOUND)
	SET(VTK_USE_QVTK "ON")
ELSE()
	SET(VTK_USE_QVTK "OFF")
	MESSAGE(FATAL_ERROR "VTK or QT4 Not found.")
ENDIF()

IF(VTK_USE_QVTK)
  # workaround for debian package
  get_target_property(QVTK_IMPORTED_LOCATION_RELEASE QVTK IMPORTED_LOCATION_RELEASE)
  get_target_property(QVTK_IMPORTED_LOCATION_DEBUG QVTK IMPORTED_LOCATION_DEBUG)
  # if both don't exist
  IF(NOT EXISTS "${QVTK_IMPORTED_LOCATION_RELEASE}" AND NOT EXISTS "${QVTK_IMPORTED_LOCATION_DEBUG}")
    MESSAGE(FATAL_ERROR "QVTK not found.")
  ENDIF()
ELSE()
  MESSAGE(FATAL_ERROR "QVTK not found.")
ENDIF()

INCLUDE(${VTK_USE_FILE})
INCLUDE(${QT_USE_FILE})
ADD_DEFINITIONS(${QT_DEFINITIONS})

SET(sra_SOURCES src/main.cpp src/mainwindow.cpp)
SET(sra_HEADERS include/mainwindow.h)
SET(sra_FORMS include/mainwindow.ui)

# Invoking MOC for headers
QT4_WRAP_CPP(sra_HEADERS_MOC ${sra_HEADERS})

# Invoking UIC for forms
QT4_WRAP_UI(sra_FORMS_HEADERS ${sra_FORMS})

# Set Output Directories.
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

ADD_EXECUTABLE(scanRegistrationApp ${sra_SOURCES} ${sra_HEADERS_MOC} ${sra_FORMS})
TARGET_LINK_LIBRARIES(scanRegistrationApp ${QT_LIBRARIES} QVTK vtkRendering)
